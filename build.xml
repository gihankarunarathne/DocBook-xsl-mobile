<project default="help" name="DocBookMobileBuild">

  <dirname property="ant.file.dir" file="${ant.file.DocBookMobileBuild}"/>
  <loadproperties srcFile="${ant.file.dir}/build.properties"/>
  <property name="mobile.include.search.tab" value="true"/>

  <include file="${ant.file.dir}/android/build.xml" as="nested"/>

  <property name="extensions.dir" value="${ant.file.dir}/../extensions"/>

  <path id="classpath">
    <pathelement location="${extensions.dir}/webhelpindexer.jar"/>
    <pathelement location="${extensions.dir}/lucene-analyzers-3.0.0.jar"/>
    <pathelement location="${extensions.dir}/lucene-core-3.0.0.jar"/>
    <pathelement location="${extensions.dir}/tagsoup-1.2.1.jar"/>
  </path>

  <condition property="perform-validation-dtd">
    <equals arg1="${validate-against-dtd}" arg2="true"/>
  </condition>
  <condition property="do-search-indexing">
    <equals arg1="${mobile.include.search.tab}" arg2="true"/>
  </condition>

  <target name="validate" if="perform-validation-dtd">
    <xmlvalidate file="${input-xml}" classname="org.apache.xerces.parsers.SAXParser"/>
  </target>

  <target name="chunk" depends="clean">
    <mkdir dir="${output-dir}"/>
    <xslt in="${input-xml}" out="${output-dir}/dummy.html" style="${stylesheet-path}"
      scanincludeddirectories="false" classpath="${xslt-processor-classpath}">
      <param name="mobile.include.search.tab" expression="${mobile.include.search.tab}"
        if="mobile.include.search.tab"/>
      <param name="output_file_name" expression="${output_file_name}"/>
      <param name="mobile.base.dir" expression="${output-dir}" if="output-dir"/>
      <param name="mobile.toc.filename" expression="${mobile.toc.filename}" if="mobile.toc.filename"/>
      <param name="mobile.menubar.filename" expression="${mobile.menubar.filename}" if="mobile.menubar.filename"/>
      <param name="mobile.settings.filename" expression="${mobile.settings.filename}" if="mobile.settings.filename"/>
      <param name="mobile.indexer.language" expression="${mobile.indexer.language}" if="mobile.indexer.language"/>
      <param name="branding" expression="${branding}" if="branding"/>
      <param name="brandname" expression="${brandname}" if="brandname"/>
      <param name="admon.graphics" expression="${admon.graphics}" if="admon.graphics"/>
      <param name="suppress.footer.navigation" expression="${suppress.footer.navigation}" if="suppress.footer.navigation"/>
    </xslt>

    <delete file="${output-dir}/dummy.html"/>

  </target>

  <target name="add_resources" description="copy js and css">
    <!-- add javascripts and CSS files -->
    <echo>adding resources</echo>
    <copy todir="${output-dir}">
      <fileset dir="${ant.file.dir}/template_mobile">
        <include name="**/*"/>
        <exclude name="**/content/search/**"/>
      </fileset>
    </copy>
  </target>

  <target name="index" if="do-search-indexing">

    <echo>start index</echo>
    <copy todir="${output-dir}">
      <fileset dir="${ant.file.dir}/template_mobile">
        <include name="**/*"/>
        <exclude name="**/content/search/*.props"/>
        <exclude name="**/content/search/stemmers/*"/>
      </fileset>
    </copy>

    <!-- We separate this out so we only copy the stopwords list and stemmer for the indexer language -->
    <copy todir="${output-dir}">
      <fileset dir="${ant.file.dir}/template_mobile">
        <include name="**/content/search/default.props"/>
        <include name="**/content/search/punctuation.props"/>
        <include name="**/content/search/${mobile.indexer.language}*.props"/>
        <include name="**/content/search/stemmers/${mobile.indexer.language}_stemmer.js"/>
      </fileset>
    </copy>

    <!--taskdef name="indexertask"
	  classname="com.nexwave.nquindexer.IndexerMain">
	  <classpath refid="classpath"/>
	</taskdef-->

    <echo>Indexing html files in ${output-dir}/content</echo>

    <java classname="com.nexwave.nquindexer.IndexerMain" fork="true">
      <sysproperty key="htmlDir" value="${output-dir}/content"/>
      <sysproperty key="indexerLanguage" value="${mobile.indexer.language}"/>
      <sysproperty key="htmlExtension" value="${html.extension}"/>
      <sysproperty key="doStem" value="${enable.stemming}"/>
      <sysproperty key="tocFile" value="${toc.file}"/>
      <sysproperty key="test" value="${indexer-excluded-files}"/>

      <!--TagSoup SAX Parser for parsing even the bad html contents. see 
	      http://sourceforge.net/tracker/?func=detail&aid=3401185&group_id=21935&atid=373750-->
      <sysproperty key="org.xml.sax.driver" value="org.ccil.cowan.tagsoup.Parser"/>
      <sysproperty key="javax.xml.parsers.SAXParserFactory"
        value="org.ccil.cowan.tagsoup.jaxp.SAXFactoryImpl"/>

      <!-- Uncomment the following if Xerces is your preference as the SAX XML Parser. Note that the indexing will fail with Xerces
	      if the html files are not XML-conformance -->
      <!--sysproperty key="org.xml.sax.driver" value="org.apache.xerces.parsers.SAXParser"/>	      
         <sysproperty key="javax.xml.parsers.SAXParserFactory" value="org.apache.xerces.jaxp.SAXParserFactoryImpl"/-->

      <!-- Debug the indexer on port 5005 via remote-debug -->
      <!--jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/-->
      <classpath>
        <path refid="classpath"/>
        <pathelement location="${xercesImpl.jar}"/>
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="/usr/share/java/xercesImpl.jar"/>
        <pathelement location="/usr/share/java/xml-apis.jar"/>
        <!-- Gentoo Linux friendly default classpath-->
        <!-- <pathelement location="/usr/share/xerces-2/lib/xercesImpl.jar"/>-->
        <!-- <pathelement location="/usr/share/xml-commons/lib/xml-apis.jar"/>-->
      </classpath>
    </java>

    <delete>
      <fileset dir="${output-dir}/content/search" includes="*.props"/>
    </delete>

  </target>

  <!-- Output of chunked htmls for all platforms  -->
  <target name="mobile" depends="validate , chunk , add_resources , index"/>

  <!-- Android  -->
  <target name="mobile_android_unsigned_apk" depends="mobile ,index ,  nested.android_unsigned_apk"/>
  <target name="mobile_android_debug_apk" depends="mobile , index ,  nested.android_debug_apk"/>

  <!-- iOS -->
  <target name="mobile_iOS_" depends="mobile , index"/>

  <!-- windows phone -->
  <target name="mobile_windows_phone_" depends="mobile , index"/>

  <target name="clean">
    <delete dir="${output-dir}"/>

    <delete file="${prof-file}"/>
    <delete dir="${prof-dir}"/>

  </target>

  <target name="help">
    <echo> help : to view help options
      === List of Available mobile platforms ===
      =mobile platform=     =ant command=
      
      |_Android             :$ant android-help *
      |__Apple iOS          :$ant iOS-help
      |___Blackberry        :$ant blackberry-help
      |____Palm webOS
      |_____Samsung Bada
      |______Windows Phone  :$ant windows-phone-help
    </echo>
  </target>
  <target name="android-help">
    <echo> Available ant commands : 
      1. $ant mobile_android_debug_apk : can't be
      used to debug purposes. This can not distribute to the end-users until, it signed by 'Android
      2. $ant mobile_android_unsigned_apk : can't be installed into a
      device until, it signed by 'Andriod Private Key' 
      
      Private Key'. 
      * To gain a key :
      http://developer.android.com/distribute/googleplay/publish/register.html To sign app with the
      key : http://developer.android.com/tools/publishing/app-signing.html 
    </echo>
  </target>
</project>
